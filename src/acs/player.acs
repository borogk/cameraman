#library "player"

#include "zcommon.acs"
#import "geometry.acs"
#import "common.acs"

int cameraTid = -1;
int cameraPathTid = -1;
int cameraPathIndex = 0;
bool playing = false;

// ---------------------------------------------------------------------------

function int GetCameraTid(void)
{
    if (cameraTid == -1)
    {
        cameraTid = UniqueTid();
    }

    return cameraTid;
}

function int GetCameraPathTid(void)
{
    if (cameraPathTid == -1)
    {
        cameraPathTid = UniqueTid();
    }

    return cameraPathTid;
}

// ---------------------------------------------------------------------------

script "Cman_PlayInPlayer" (void)
{
    playing = true;
    Delay(GetDelay());
    ACS_NamedExecute("Cman_Play", 0);
}

script "Cman_Play" (void)
{
    int pathMode = GetPathMode();
    int speedMode = GetSpeedMode();
    int angleMode = GetAngleMode();
    int speed = GetSpeed();
    bool overshoot = GetOvershoot();
    bool warpPlayer = GetWarpPlayer();
    bool hidePlayer = GetHidePlayer();
    int gaBufferLen = GetAngleBufferLen();

    if (pathMode == PATH_MODE_LINEAR)
    {
        InitLinearValues(GetX0(), GetY0(), GetZ0(), GetX1(), GetY1(), GetZ1(), GetA0(), GetA1(), GetP0(), GetP1());
    }
    else if (pathMode == PATH_MODE_RADIAL)
    {
        InitRadialValues(GetRA0(), GetRA1(), GetR0(), GetR1(), GetCX0(), GetCY0(), GetCX1(), GetCY1(), GetZ0(), GetZ1(), GetA0(), GetA1(), GetP0(), GetP1());
    }
    else if (pathMode == PATH_MODE_BEZIER)
    {
        InitBezierValues(GetX0(), GetY0(), GetZ0(), GetX1(), GetY1(), GetZ1(), GetX2(), GetY2(), GetZ2(), GetA0(), GetA1(), GetP0(), GetP1());
    }

    int t = 0.0;
    int progress = NextValues(0, pathMode, speedMode, angleMode, speed, overshoot, gaBufferLen);

    Thing_Remove(GetCameraTid());
    SpawnSpot("CmanCamera", 0, GetCameraTid());
    SetActorPitch(GetCameraTid(), GetP0());
    WarpNoCheck(GetCameraTid(), gx, gy, gz, ga, 0);
    if (warpPlayer)
    {
        WarpNoCheck(0, gx, gy, gz, ga, 0);
    }
    ChangeCamera(GetCameraTid(), false, false);

    if (speed > 0)
    {
        Delay(1);
        while (playing && progress < 1.0)
        {
            t += 1.0;
            progress = NextValues(t, pathMode, speedMode, angleMode, speed, overshoot, gaBufferLen);
            WarpNoCheck(GetCameraTid(), gx, gy, gz, ga, gdp);
            if (warpPlayer)
            {
                WarpNoCheck(0, gx, gy, gz, ga, gdp);
            }
            Delay(1);
        }
    }
}
