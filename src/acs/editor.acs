#library "editor"

#include "zcommon.acs"
#import "player.acs"
#import "geometry.acs"
#import "common.acs"

#define DRAW_MODE_LINEAR            0
#define DRAW_MODE_RADIAL            1
#define DRAW_MODE_BEZIER            2
#define DRAW_MODE_POINT_AND_SHOOT   3

#define ONE_TIC_MESSAGE_DURATION    1873

#define DEFAULT_MESSAGE_FREEZE      50

int cursorTid = -1;
int pathMarkerTid = -1;
int tempPathMarkerTid = -1;

int drawMode = DRAW_MODE_LINEAR;
int curIndex = 0;
int curX[8];
int curY[8];
int curZ[8];
int curA[8];
int curP[8];
bool curLocked = false;

str statusMessageFreeze = "";
int statusMessageFreezeTics = 0;

int exportCount = 0;

// Editor CVARS

function int GetCursorDistance(void)
{
    return Max(GetCVar("cman_editor_cursor_distance"), 0.0);
}

function void SetCursorDistance(int value)
{
    SetCVar("cman_editor_cursor_distance", Max(value, 0.0));
}

function int GetCursorSensitivity(void)
{
    return Max(GetCVar("cman_editor_cursor_sensitivity"), 0.001);
}

function int GetLinearPathResolution(void)
{
    return Max(GetCVar("cman_editor_linear_path_resolution"), 1.0);
}

function int GetRadialPathResolution(void)
{
    return Max(GetCVar("cman_editor_radial_path_resolution"), 0.001);
}

function int GetBezierPathResolution(void)
{
    return Max(GetCVar("cman_editor_bezier_path_resolution"), 0.001);
}

function int GetPathAnimationDelay(void)
{
    return Max(GetCVar("cman_editor_path_animation_delay"), 0);
}

// Editor TIDs

function int GetCursorTid(void)
{
    if (cursorTid == -1)
    {
        cursorTid = UniqueTid();
    }

    return cursorTid;
}

function int GetPathMarkerTid(void)
{
    if (pathMarkerTid == -1)
    {
        pathMarkerTid = UniqueTid();
    }

    return pathMarkerTid;
}

function int GetTempPathMarkerTid(void)
{
    if (tempPathMarkerTid == -1)
    {
        tempPathMarkerTid = UniqueTid();
    }

    return tempPathMarkerTid;
}

// ---------------------------------------------------------------------------

function void SpawnPathMarker(bool final, int animationDelay)
{
    if (final)
    {
        int tid = UniqueTid();
        Spawn("CmanPathMarker", gx, gy, gz, tid, 0);
        SetUserVariable(tid, "user_animation_delay", animationDelay);
        SetActorState(tid, "Animated", true);
        Thing_ChangeTid(tid, GetPathMarkerTid());
    }
    else
    {
        Spawn("CmanTempPathMarker", gx, gy, gz, GetTempPathMarkerTid(), 0);
    }
}

function void RespawnPathAfterGeometryInit(bool final, int pathMode)
{
    Thing_Remove(final ? GetPathMarkerTid() : GetTempPathMarkerTid());

    int speedMode, resolution;
    if (pathMode == PATH_MODE_LINEAR)
    {
        speedMode = SPEED_MODE_DISTANCE;
        resolution = GetLinearPathResolution();
    }
    else if (pathMode == PATH_MODE_RADIAL)
    {
        speedMode = SPEED_MODE_DISTANCE;
        resolution = GetRadialPathResolution();
    }
    else if (pathMode == PATH_MODE_BEZIER)
    {
        speedMode = SPEED_MODE_TIME;
        resolution = GetBezierPathResolution();
    }

    int animationDelay = 0;
    int t = 0.0;
    int progress;
    do
    {
        progress = NextValues(t, pathMode, speedMode, 0, resolution, false, 1);
        animationDelay += GetPathAnimationDelay();
        SpawnPathMarker(final, animationDelay);
        t += 1.0;
    }
    while (progress < 1.0);
}

function void InitFinalGeometryAndRespawnPath(void)
{
    int pathMode = GetPathMode();
    if (pathMode == PATH_MODE_LINEAR)
    {
        InitLinearValues(GetX0(), GetY0(), GetZ0(), GetX1(), GetY1(), GetZ1(), 0, 0, 0, 0);
    }
    else if (pathMode == PATH_MODE_RADIAL)
    {
        InitRadialValues(GetRA0(), GetRA1(), GetR0(), GetR1(), GetCX0(), GetCY0(), GetCX1(), GetCY1(), GetZ0(), GetZ1(), 0, 0, 0, 0);
    }
    else if (pathMode == PATH_MODE_BEZIER)
    {
        InitBezierValues(GetX0(), GetY0(), GetZ0(), GetX1(), GetY1(), GetZ1(), GetX2(), GetY2(), GetZ2(), 0, 0, 0, 0);
    }

    RespawnPathAfterGeometryInit(true, pathMode);
}

function void MoveLockedCursor(int diff)
{
    int dx = GetActorX(0) - curX[curIndex];
    int dy = GetActorY(0) - curY[curIndex];
    int dz = GetActorZ(0) + GetActorViewHeight(0) - curZ[curIndex];

    int dist = VectorLength(VectorLength(dx, dy), dz);
    if (diff > 0.0 || dist > diff)
    {
        int a = VectorAngle(dx, dy);
        int p = VectorAngle(dist, dz);

        curX[curIndex] = curX[curIndex] - FixedMul(Cos(a), diff);
        curY[curIndex] = curY[curIndex] - FixedMul(Sin(a), diff);
        curZ[curIndex] = curZ[curIndex] - FixedMul(Sin(p), diff);
    }
}

function str RoundAngleStr(int a, int n)
{
    return StrLeft(StrParam(f:a), n + (a < 0 ? 3 : 2));
}

// ---------------------------------------------------------------------------

script "Cman_InitEditor" ENTER
{
    InitFinalGeometryAndRespawnPath();
}

script "Cman_CursorLoop" ENTER
{
    Spawn("CmanCursor", GetActorX(0), GetActorY(0), GetActorZ(0), GetCursorTid(), 0);

    while (true)
    {
        int d = GetCursorDistance();
        int a = GetActorAngle(0);
        int p = GetActorPitch(0);
        int x = GetActorX(0);
        int y = GetActorY(0);
        int z = GetActorZ(0) + GetActorViewHeight(0);

        if (drawMode != DRAW_MODE_POINT_AND_SHOOT)
        {
            if (!curLocked)
            {
                curX[curIndex] = x + FixedMul(Cos(a), d);
                curY[curIndex] = y + FixedMul(Sin(a), d);
                curZ[curIndex] = z - FixedMul(Sin(p), d);

                SetActorFlag(GetCursorTid(), "INVISIBLE", false);
                SetActorProperty(GetCursorTid(), APROP_StencilColor, 0x00FF00);
            }
            else
            {
                SetActorFlag(GetCursorTid(), "INVISIBLE", false);
                SetActorProperty(GetCursorTid(), APROP_StencilColor, 0xFFFF00);
            }

            WarpNoCheck(GetCursorTid(), curX[curIndex], curY[curIndex], curZ[curIndex], 0, 0);
        }
        else
        {
            curX[curIndex] = x;
            curY[curIndex] = y;
            curZ[curIndex] = z - 8.0;
            curA[curIndex] = a;
            curP[curIndex] = p;

            SetActorFlag(GetCursorTid(), "INVISIBLE", true);
        }

        if ((drawMode == DRAW_MODE_LINEAR || drawMode == DRAW_MODE_BEZIER) && curIndex == 1)
        {
            InitLinearValues(curX[0], curY[0], curZ[0], curX[1], curY[1], curZ[1], 0, 0, 0, 0);
            RespawnPathAfterGeometryInit(false, PATH_MODE_LINEAR);
        }
        else if (drawMode == DRAW_MODE_RADIAL && curIndex > 0)
        {
            int r0 = VectorLength(curX[1] - curX[0], curY[1] - curY[0]);
            int r1 = curIndex >= 2 ? VectorLength(curX[2] - curX[0], curY[2] - curY[0]) : r0;

            InitRadialValues(0.0, 1.0, r0, r1, curX[0], curY[0], curX[0], curY[0], curZ[0], curZ[1], 0, 0, 0, 0);
            RespawnPathAfterGeometryInit(false, PATH_MODE_RADIAL);
        }
        else if (drawMode == DRAW_MODE_BEZIER && curIndex == 2)
        {
            InitBezierValues(curX[0], curY[0], curZ[0], curX[2], curY[2], curZ[2], curX[1], curY[1], curZ[1], 0, 0, 0, 0);
            RespawnPathAfterGeometryInit(false, PATH_MODE_BEZIER);
        }

        if (!playing)
        {
            int hudY = 0.46;

            HudMessage(s:"Cursor"; HUDMSG_PLAIN, 0, CR_GREY, -0.01, hudY, ONE_TIC_MESSAGE_DURATION); hudY += 0.04;
            HudMessage(s:"X = ", d:(curX[curIndex] >> 16); HUDMSG_PLAIN, 0, CR_GREEN, -0.01, hudY, ONE_TIC_MESSAGE_DURATION); hudY += 0.03;
            HudMessage(s:"Y = ", d:(curY[curIndex] >> 16); HUDMSG_PLAIN, 0, CR_GREEN, -0.01, hudY, ONE_TIC_MESSAGE_DURATION); hudY += 0.03;
            HudMessage(s:"Z = ", d:(curZ[curIndex] >> 16); HUDMSG_PLAIN, 0, CR_GREEN, -0.01, hudY, ONE_TIC_MESSAGE_DURATION); hudY += 0.03;
            if (drawMode != DRAW_MODE_POINT_AND_SHOOT && !curLocked)
            {
                HudMessage(s:"Distance = ", d:(d >> 16); HUDMSG_PLAIN, 0, CR_GREEN, -0.01, hudY, ONE_TIC_MESSAGE_DURATION);
            }
            else
            {
                HudMessage(s:"Distance = N/A"; HUDMSG_PLAIN, 0, CR_GREY, -0.01, hudY, ONE_TIC_MESSAGE_DURATION);
            }

            hudY += 0.07;

            HudMessage(s:"Angle"; HUDMSG_PLAIN, 0, CR_GREY, -0.01, hudY, ONE_TIC_MESSAGE_DURATION); hudY += 0.04;
            HudMessage(s:RoundAngleStr(a, 3); HUDMSG_PLAIN, 0, CR_YELLOW, -0.01, hudY, ONE_TIC_MESSAGE_DURATION);
            HudMessage(s:RoundAngleStr(a - 1.0, 3); HUDMSG_PLAIN, 0, CR_YELLOW, -0.12, hudY, ONE_TIC_MESSAGE_DURATION);

            hudY += 0.07;

            HudMessage(s:"Pitch"; HUDMSG_PLAIN, 0, CR_GREY, -0.01, hudY, ONE_TIC_MESSAGE_DURATION); hudY += 0.04;
            HudMessage(s:RoundAngleStr(p, 3); HUDMSG_PLAIN, 0, CR_YELLOW, -0.01, hudY, ONE_TIC_MESSAGE_DURATION);

            str drawModeStr = "";
            if (drawMode == DRAW_MODE_LINEAR)
            {
                drawModeStr = "LINEAR";
            }
            else if (drawMode == DRAW_MODE_RADIAL)
            {
                drawModeStr = "RADIAL";
            }
            else if (drawMode == DRAW_MODE_BEZIER)
            {
                drawModeStr = "BEZIER";
            }
            else if (drawMode == DRAW_MODE_POINT_AND_SHOOT)
            {
                drawModeStr = "POINT AND SHOOT";
            }

            hudY += 0.07;

            HudMessage(s:"Draw mode:"; HUDMSG_PLAIN, 0, CR_GREY, -0.01, hudY, ONE_TIC_MESSAGE_DURATION);
            HudMessage(s:drawModeStr; HUDMSG_PLAIN, 0, CR_GREEN, -0.22, hudY, ONE_TIC_MESSAGE_DURATION);

            str curLockedStr;
            int curLockedColor;
            if (drawMode == DRAW_MODE_POINT_AND_SHOOT)
            {
                curLockedStr = "N/A";
                curLockedColor = CR_GREY;
            }
            else if (curLocked)
            {
                curLockedStr = "ON";
                curLockedColor = CR_YELLOW;
            }
            else
            {
                curLockedStr = "OFF";
                curLockedColor = CR_GREEN;
            }

            hudY += 0.04;

            HudMessage(s:"Cursor lock:"; HUDMSG_PLAIN, 0, CR_GREY, -0.01, hudY, ONE_TIC_MESSAGE_DURATION);
            HudMessage(s:curLockedStr; HUDMSG_PLAIN, 0, curLockedColor, -0.22, hudY, ONE_TIC_MESSAGE_DURATION);

            str statusStr;
            if (statusMessageFreezeTics > 0)
            {
                statusStr = statusMessageFreeze;
                statusMessageFreezeTics--;
            }
            else if (drawMode == DRAW_MODE_LINEAR)
            {
                if (curIndex == 0)
                {
                    statusStr = "Step 1: move cursor to the line start, 'use cursor' to continue";
                }
                else
                {
                    statusStr = "Step 2: move cursor to the line end, 'use cursor' to finish";
                }
            }
            else if (drawMode == DRAW_MODE_RADIAL)
            {
                if (curIndex == 0)
                {
                    statusStr = "Step 1: move cursor to the center, 'use cursor' to continue";
                }
                else if (curIndex == 1)
                {
                    statusStr = "Step 2: move cursor to set the radius, 'use cursor' to continue";
                }
                else
                {
                    statusStr = "Step 3: move cursor to set the 2nd radius, 'use cursor' to finish";
                }
            }
            else if (drawMode == DRAW_MODE_BEZIER)
            {
                if (curIndex == 0)
                {
                    statusStr = "Step 1: move cursor to the curve start, 'use cursor' to continue";
                }
                else if (curIndex == 1)
                {
                    statusStr = "Step 2: move cursor to the curve end, 'use cursor' to continue";
                }
                else
                {
                    statusStr = "Step 3: move cursor to bend the curve, 'use cursor' to finish";
                }
            }
            else if (drawMode == DRAW_MODE_POINT_AND_SHOOT)
            {
                if (curIndex == 0)
                {
                    statusStr = "Step 1: move yourself to the line start, press 'use cursor'";
                }
                else
                {
                    statusStr = "Step 2: move yourself to the line end, press 'use cursor' to finish";
                }
            }

            hudY += 0.08;

            HudMessage(s:statusStr; HUDMSG_PLAIN, 0, CR_CYAN, -0.01, hudY, ONE_TIC_MESSAGE_DURATION);
        }

        Delay(1);
    }
}

script "Cman_MoveCursorForward" (void)
{
    if (!curLocked)
    {
        SetCursorDistance(GetCursorDistance() + GetCursorSensitivity());
    }
    else
    {
        MoveLockedCursor(GetCursorSensitivity());
    }
}

script "Cman_MoveCursorBack" (void)
{
    if (!curLocked)
    {
        SetCursorDistance(GetCursorDistance() - GetCursorSensitivity());
    }
    else
    {
        MoveLockedCursor(-GetCursorSensitivity());
    }
}

script "Cman_UseCursor" (void)
{
    curIndex++;
    curX[curIndex] = curX[curIndex - 1];
    curY[curIndex] = curY[curIndex - 1];
    curZ[curIndex] = curZ[curIndex - 1];

    if (drawMode == DRAW_MODE_LINEAR && curIndex >= 2)
    {
        SetPathMode(PATH_MODE_LINEAR);
        SetX0(curX[0]);
        SetY0(curY[0]);
        SetZ0(curZ[0]);
        SetX1(curX[1]);
        SetY1(curY[1]);
        SetZ1(curZ[1]);

        curIndex = 0;
        InitFinalGeometryAndRespawnPath();
        Thing_Remove(GetTempPathMarkerTid());
        statusMessageFreeze = "------ Made a line! ------";
        statusMessageFreezeTics = DEFAULT_MESSAGE_FREEZE;
    }
    else if (drawMode == DRAW_MODE_RADIAL && curIndex >= 3)
    {
        SetPathMode(PATH_MODE_RADIAL);
        SetCX0(curX[0]);
        SetCY0(curY[0]);
        SetCX1(curX[0]);
        SetCY1(curY[0]);
        SetZ0(curZ[0]);
        SetZ1(curZ[1]);
        SetR0(VectorLength(curX[1] - curX[0], curY[1] - curY[0]));
        SetR1(VectorLength(curX[2] - curX[0], curY[2] - curY[0]));
        SetRA0(0.0);
        SetRA1(1.0);

        curIndex = 0;
        InitFinalGeometryAndRespawnPath();
        Thing_Remove(GetTempPathMarkerTid());
        statusMessageFreeze = "------ Made a radial curve! ------";
        statusMessageFreezeTics = DEFAULT_MESSAGE_FREEZE;
    }
    else if (drawMode == DRAW_MODE_BEZIER && curIndex >= 3)
    {
        SetPathMode(PATH_MODE_BEZIER);
        SetX0(curX[0]);
        SetY0(curY[0]);
        SetZ0(curZ[0]);
        SetX1(curX[2]);
        SetY1(curY[2]);
        SetZ1(curZ[2]);
        SetX2(curX[1]);
        SetY2(curY[1]);
        SetZ2(curZ[1]);

        curIndex = 0;
        InitFinalGeometryAndRespawnPath();
        Thing_Remove(GetTempPathMarkerTid());
        statusMessageFreeze = "------ Made a Bezier curve! ------";
        statusMessageFreezeTics = DEFAULT_MESSAGE_FREEZE;
    }
    else if (drawMode == DRAW_MODE_POINT_AND_SHOOT && curIndex >= 2)
    {
        SetPathMode(PATH_MODE_LINEAR);
        SetX0(curX[0]);
        SetY0(curY[0]);
        SetZ0(curZ[0]);
        SetX1(curX[1]);
        SetY1(curY[1]);
        SetZ1(curZ[1]);
        SetA0(curA[0]);
        SetA1(FixAngleCrossingEast(curA[1], curA[0]));
        SetP0(curP[0]);
        SetP1(curP[1]);
        SetAngleMode(ANGLE_MODE_ABSOLUTE);
        SetOvershoot(false);

        curIndex = 0;
        InitFinalGeometryAndRespawnPath();
        Thing_Remove(GetTempPathMarkerTid());
        statusMessageFreeze = "------ Made a line! ------";
        statusMessageFreezeTics = DEFAULT_MESSAGE_FREEZE;
    }
}

script "Cman_SwitchDrawingMode" (void)
{
    curIndex = 0;
    Thing_Remove(GetTempPathMarkerTid());

    if (drawMode == DRAW_MODE_LINEAR)
    {
        drawMode = DRAW_MODE_RADIAL;
    }
    else if (drawMode == DRAW_MODE_RADIAL)
    {
        drawMode = DRAW_MODE_BEZIER;
    }
    else if (drawMode == DRAW_MODE_BEZIER)
    {
        drawMode = DRAW_MODE_POINT_AND_SHOOT;
    }
    else if (drawMode == DRAW_MODE_POINT_AND_SHOOT)
    {
        drawMode = DRAW_MODE_LINEAR;
    }
}

script "Cman_ToggleCursorLock" (void)
{
    curLocked = !curLocked;
}

script "Cman_Export" (void)
{
    int pathMode = GetPathMode();

    Log(s:"--- BEGIN CAMERAMAN ---");
    Log(s:"path_mode = ", d:pathMode);
    if (pathMode == PATH_MODE_LINEAR || pathMode == PATH_MODE_RADIAL)
    {
        Log(s:"speed_mode = ", d:GetSpeedMode());
    }
    Log(s:"angle_mode = ", d:GetAngleMode());
    Log(s:"delay = ", d:GetDelay());
    Log(s:"speed = ", f:GetSpeed());
    Log(s:"overshoot = ", d:(GetOvershoot() ? 1 : 0));
    Log(s:"warp_player = ", d:(GetWarpPlayer() ? 1 : 0));
    Log(s:"hide_player = ", d:(GetHidePlayer() ? 1 : 0));
    Log(s:"ga_buffer_len = ", d:GetAngleBufferLen());
    if (pathMode == PATH_MODE_LINEAR || pathMode == PATH_MODE_BEZIER)
    {
        Log(s:"x0 = ", f:GetX0());
        Log(s:"x1 = ", f:GetX1());
    }
    if (pathMode == PATH_MODE_BEZIER)
    {
        Log(s:"x2 = ", f:GetX2());
    }
    if (pathMode == PATH_MODE_LINEAR || pathMode == PATH_MODE_BEZIER)
    {
        Log(s:"y0 = ", f:GetY0());
        Log(s:"y1 = ", f:GetY1());
    }
    if (pathMode == PATH_MODE_BEZIER)
    {
        Log(s:"y2 = ", f:GetY2());
    }
    Log(s:"z0 = ", f:GetZ0());
    Log(s:"z1 = ", f:GetZ1());
    if (pathMode == PATH_MODE_BEZIER)
    {
        Log(s:"z2 = ", f:GetZ2());
    }
    Log(s:"a0 = ", f:GetA0());
    Log(s:"a1 = ", f:GetA1());
    Log(s:"p0 = ", f:GetP0());
    Log(s:"p1 = ", f:GetP1());
    if (pathMode == PATH_MODE_RADIAL)
    {
        Log(s:"ra0 = ", f:GetRA0());
        Log(s:"ra1 = ", f:GetRA1());
        Log(s:"cx0 = ", f:GetCX0());
        Log(s:"cx1 = ", f:GetCX1());
        Log(s:"cy0 = ", f:GetCY0());
        Log(s:"cy1 = ", f:GetCY1());
        Log(s:"r0 = ", f:GetR0());
        Log(s:"r1 = ", f:GetR1());
    }
    Log(s:"--- END CAMERAMAN ---");

    Print(s:"Exported camera parameters ", d:++exportCount);
}

script "Cman_WarpToPath" (void)
{
    SetActorVelocity(0, 0, 0, 0, false, false);

    int pathMode = GetPathMode();
    if (pathMode == PATH_MODE_LINEAR || pathMode == PATH_MODE_BEZIER)
    {
        WarpNoCheck(0, GetX0(), GetY0(), GetZ0(), VectorAngle(GetX1() - GetX0(), GetY1() - GetY0()), 0);
    }
    else if (pathMode == PATH_MODE_RADIAL)
    {
        WarpNoCheck(0, GetCX0(), GetCY0(), GetZ0(), GetRA0(), 0);
    }
}

script "Cman_PlayInEditor" (void)
{
    playing = !playing;

    InitFinalGeometryAndRespawnPath();
    SetActorFlag(GetPathMarkerTid(), "INVISIBLE", playing);
    SetActorFlag(GetCursorTid(), "INVISIBLE", playing);
    if (playing)
    {
        if (GetHidePlayer())
        {
            SetActorFlag(0, "INVISIBLE", true);
        }
    }
    else
    {
        SetActorFlag(0, "INVISIBLE", false);
    }

    if (playing)
    {
        ACS_NamedExecute("Cman_Play", 0);
    }
    else
    {
        ChangeCamera(0, false, false);
    }
}

script "Cman_RefreshEditor" (void)
{
    InitFinalGeometryAndRespawnPath();
}
